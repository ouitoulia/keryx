<?php

use Drupal\Core\Database\Database;
use Drupal\keryx\Helper\Helper;
use Drupal\skenografia\Helper\Helper as SkenografiaHelper;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_breadcrumb().
 *
 * Viene costruita una breadcrumb con la seguente struttura:
 * /home/A.T./macro-famiglia/tipologia-dati/obbligo
 */
function keryx_preprocess_breadcrumb(&$variables) {
  if ( \Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' ) {
    $term = \Drupal::routeMatch()->getParameter('taxonomy_term');

    if ($term instanceof Term && $term->bundle() == 'obblighi_di_pubblicazione') {

      // Trovo la tipologia di dato di amministrazione trasparente
      // a cui è associato l'obbligo di pubblicazione.
      $term_ids = Helper::getTipologiaDato($term);

      if (!empty($term_ids)) {
        // Costruisco una nuova breadcrumb
        $new_breadcrumb = [];

        // Salvo i primi due elementi
        $new_breadcrumb[] = $variables['breadcrumb'][0];
        $new_breadcrumb[] = $variables['breadcrumb'][1];

        // Abbrevio il link di amministrazione trasparente
        $new_breadcrumb[1]['text'] = 'A.T.';

        // Recupero le associazioni (dovrebbe esserci un solo elemento nell'array)
        $tipologie_dati = Term::loadMultiple($term_ids);

        // Aggiungo gli elementi trovati dalla query
        foreach ($tipologie_dati as $tipologia_dato) {
          // Recupero il termine genitore (macrofamiglia) dal campo 'parent'.
          $parent_target = $tipologia_dato->get('parent')->getValue();
          if (!empty($parent_target)) {
            $parent_tid = $parent_target[0]['target_id'];
            $parent_term = Term::load($parent_tid);

            if ($parent_term) {
              // Aggiungo la macrofamiglia alla breadcrumb.
              $new_breadcrumb[] = [
                'text' => $parent_term->label(),
                'url' => Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $parent_term->id()])->toString(),
              ];
            }
          }

          // Aggiungi il link alla breadcrumb.
          $new_breadcrumb[] = [
            'text' => $tipologia_dato->label(),
            'url' => Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $tipologia_dato->id()])->toString(),
          ];

          // Aggiungo l'ultimo elemento (che è la pagina corrente)
          $new_breadcrumb[] = end($variables['breadcrumb']);

          // Sovrascrivo con la nuova breadcrumb
          $variables['breadcrumb'] = $new_breadcrumb;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function keryx_preprocess_page(array &$variables) {
  if ( \Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' ) {
    $term = \Drupal::routeMatch()->getParameter('taxonomy_term');

    if ($term instanceof Term && $term->bundle() == 'obblighi_di_pubblicazione') {
      // Se il termine è 9403 = "Atti amministrativi generali"
      if ($term->id() == 9403) {
        $variables['page']['content']['view_circolari'] = [
          '#type' => 'view',
          '#name' => 'primo_livello_novita',
          '#display_id' => 'circolari',
          '#arguments' => [],
        ];
      }

      // Se il termine è 9445 = "Organigramma - Illustrazione in forma semplificata"
      if ($term->id() == 9445) {
        $variables['page']['content']['view_secondo_livello_organizzazione'] = [
          '#type' => 'view',
          '#name' => 'secondo_livello_persone',
          '#display_id' => 'page_1',
          '#arguments' => [],
        ];
      }

      // Se il termine è 9446 = "Organigramma - Nomi dei dirigenti"
      if ($term->id() == 9446) {
        $variables['page']['content']['view_amministrazione_trasparente_obblighi'] = [
          '#type' => 'view',
          '#name' => 'amministrazione_trasparente_obblighi',
          '#display_id' => 'dirigenti',
          '#arguments' => [],
        ];
      }

      // Se il termine è 9447 = "Telefono e posta elettronica"
      if ($term->id() == 9447) {
        $variables['page']['content']['view_amministrazione_trasparente_obblighi'] = [
          '#type' => 'view',
          '#name' => 'amministrazione_trasparente_obblighi',
          '#display_id' => 'sede_legale',
          '#arguments' => [],
        ];
      }

      // Se il termine è 9448 = "Consulenti e collaboratori"
      if ($term->id() == 9448) {
        $variables['page']['content']['view_amministrazione_trasparente_obblighi'] = [
          '#type' => 'view',
          '#name' => 'amministrazione_trasparente_obblighi',
          '#display_id' => '9448_consulenti_collaboratori',
          '#arguments' => [],
        ];
        unset($variables['page']['content']['skenografia_content']);
      }

      // Se il termine è 9578 = "Elenco annuale dei progetti finanziati, con indicazione del CUP, importo totale del finanziamento, le fonti finanziarie, la data di avvio del progetto e lo stato di attuazione finanziario e procedurale"
      if ($term->id() == 9578) {
        $variables['page']['content']['view_amministrazione_trasparente_obblighi'] = [
          '#type' => 'view',
          '#name' => 'amministrazione_trasparente_obblighi',
          '#display_id' => '9568_elenco_annuale_progetti',
          '#arguments' => [],
        ];
      }

      // Aggiungo in fondo a tutte le pagine il link per tornare alla tipologia di dati
      $term_ids = Helper::getTipologiaDato($term);
      if (!empty($term_ids)) {
        // Recupero le associazioni (dovrebbe esserci un solo elemento nell'array)
        $tipologie_dati = Term::loadMultiple($term_ids);

        // Aggiungo gli elementi trovati dalla query
        foreach ($tipologie_dati as $tipologia_dato) {
          $variables['page']['content']['back_to_tipologia_dati'] = [
            '#type' => 'markup',
            '#markup' => trim(sprintf(
              '<div class="container-xxl py-5 text-align-center"><a class="btn btn-link fw-bold text-dark text-underline" href="%s" title="Torna alla tipologia dati: %s">Torna ad %s</a></div>',
                Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $tipologia_dato->id()])->toString(),
                $tipologia_dato->label(),
                $tipologia_dato->label()
            )),
            '#weight' => 100,
          ];

        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_taxonomy_term().
 */
function keryx_preprocess_taxonomy_term(&$variables) {
  $term = $variables['term'];

  // Se il termine è 9559 = "Piano triennale per la prevenzione della corruzione e della trasparenza"
  // Se il termine è 9560 = "Responsabile della prevenzione della corruzione e della trasparenza"
  // Se il termine è 9562 = "Relazione del responsabile della prevenzione della corruzione e della trasparenza"
  // aggiungo un pulsante con il collegamento al PTPCT dell'USR.
  if (in_array($term->id(), [9559, 9560, 9562]) && $variables['view_mode'] == 'full') {
    $config = \Drupal::config('keryx.settings');
    $usr_ptpct_url = $config->get('usr_ptpct_url') ?? 'https://www.istruzione.calabria.it/amministrazionetrasparente/anticorruzione/';

    $variables['content']['btn_usr_ptpct'] = [
      '#type' => 'markup',
      '#markup' => trim(sprintf(
        '<p class="p-5 border border-primary w-75"><a class="btn btn-xs btn-primary my-4" href="%s" target="_blank" title="Vai al Piano triennale per la prevenzione della corruzione e della trasparenza dell\'Ufficio Scolastico Regionale">
              Vai al Piano triennale per la prevenzione della corruzione e della trasparenza dell\'Ufficio Scolastico Regionale</a></p>',
        htmlspecialchars($usr_ptpct_url, ENT_QUOTES, 'UTF-8')
      )),
      '#weight' => 100,
    ];
  }

  // Se il termine è 9448 = "Consulenti e collaboratori"
  if ($term->id() == 9448 && $variables['view_mode'] == 'full') {
    $config = \Drupal::config('keryx.settings');
    $perla_pa_url = $config->get('perla_pa_url') ?? 'https://consulentipubblici.dfp.gov.it/?ente=DFP00017973';

    $variables['content']['btn_perla_pa'] = [
      '#type' => 'markup',
      '#markup' => trim(sprintf(
        '<p class="p-5 border w-75"><a class="btn btn-xs btn-primary my-4" href="%s" target="_blank" title="Vai al Portale Perla PA in una nuova finestra">Collegamento con la Banca Dati del sistema Perla PA</a></p>',
        htmlspecialchars($perla_pa_url, ENT_QUOTES, 'UTF-8')
      )),
      '#weight' => 100,
    ];
  }

  // Se il termine è 9459 = "Personale non a tempo indeterminato"
  if ($term->id() == 9459 && $variables['view_mode'] == 'full') {
    $plessi = Helper::getPlessi();

    // collegamenti con unica per singolo plesso
    $links_unica = '';

    foreach ($plessi as $plesso) {
      if ($plesso['url_unica_scuola_in_chiaro']) {
        $links_unica .= sprintf(
          '<a class="btn btn-xs btn-primary my-4" href="%s/personale/" title="Vai al Portale UNICA Scuola in chiaro" target="_blank">Collegamento con UNICA - Scuola in chiaro %s</a><br>',
          $plesso['url_unica_scuola_in_chiaro'],
          $plesso['nome']
        );
      }
    }

    $variables['content']['btn_unica'] = [
      '#type' => 'markup',
      '#markup' => trim(sprintf(
        '<p class="p-5 border w-75">Una volta aperto il collegamento con il portale UNICA, scorri la pagina fino ai dati interessati.<br>%s</p>',
        $links_unica
      )),
      '#weight' => 100,
    ];
  }

  // Se il termine è 9460 = "Tassi di assenza trimestrali"
  if ($term->id() == 9460 && $variables['view_mode'] == 'full') {
    $sede = Helper::getDatiSedeLegale();
    if (isset($sede['url_unica_scuola_in_chiaro']) && $sede['url_unica_scuola_in_chiaro']) {
      $link_unica = $sede['url_unica_scuola_in_chiaro'] . '/finanza/';
      $variables['content']['btn_unica'] = [
        '#type' => 'markup',
        '#markup' => trim(sprintf(
          '<p class="p-5 border w-75"><a class="btn btn-xs btn-primary my-4" href="%s" target="_blank" title="Vai al Portale UNICA">Collegamento con il Portale UNICA - Scuola in chiaro</a></p>',
          $link_unica
        )),
        '#weight' => 100,
      ];
    }
  }

  // Se il termine è 9461 = "Tassi di assenza trimestrali"
  if ($term->id() == 9461 && $variables['view_mode'] == 'full') {
    $sede = Helper::getDatiSedeLegale();
    if (isset($sede['codice_meccanografico']) && $sede['codice_meccanografico']) {
      $site_name = rawurlencode(\Drupal::config('system.site')->get('name'));
      $anno_scolastico_corrente = SkenografiaHelper::getAnnoScolastico([
        "formato_anno" => "yyyy-yy",
        "separatore" => "",
      ]);

      $link_miur =
        'https://oc4jesemvlas2.pubblica.istruzione.it/trasparenzaPubb/ricercaassenze.do?codScuUt=' . strtolower($sede['codice_meccanografico'])
        . '&paramDesNomScu="' . $site_name . '"'
        . '&paramDatAnnScoRil=' . $anno_scolastico_corrente
        . '&tipoRicerca=S&paramCodScuUt=' . strtoupper($sede['codice_meccanografico']);

      $link_unica = $sede['url_unica_scuola_in_chiaro'] . '/personale/assenze/';

      $variables['content']['btn_miur'] = [
        '#type' => 'markup',
        '#markup' => trim(sprintf(
          '<p class="p-5 border w-75">
                    Una volta aperto il collegamento con il portale MIUR o con il portale UNICA, seleziona il periodo per visualizzare i relativi dati.<br>
                    <a class="btn btn-xs btn-primary my-4" href="%s" target="_blank" title="Vai al Portale MIUR - Operazione Trasparenza">Collegamento con il Portale MIUR - Operazione Trasparenza</a><br>
                    <a class="btn btn-xs btn-primary my-4" href="%s" target="_blank" title="Vai al Portale Unica">Collegamento con il Portale UNICA</a>
                  </p>',
          htmlspecialchars($link_miur, ENT_QUOTES, 'UTF-8'),
          htmlspecialchars($link_unica, ENT_QUOTES, 'UTF-8')
        )),
        '#weight' => 100,
      ];
    }
  }

  // Se il termine è 9465 = "Costi contratti integrativi"
  if ($term->id() == 9465 && $variables['view_mode'] == 'full') {
    $sede = Helper::getDatiSedeLegale();
    if (isset($sede['codice_fiscale']) && $sede['codice_fiscale']) {
      $url_aran = 'https://www.contrattintegrativipa.it/ci/?enteCodiceFiscale=' . $sede['codice_fiscale'];
      $variables['content']['btn_aran'] = [
        '#type' => 'markup',
        '#markup' => trim(sprintf(
          '<p class="p-5 border w-75">Una volta aperto il "Collegamento con ARAN", cerca i contratti di questo istituto usando il seguente codice fiscale: <strong>%s</strong><br><a class="btn btn-xs btn-primary my-4" href="%s" target="_blank" title="Vai al Portale ARAN - Banca Dati Contratti Integrativi">Collegamento con ARAN - Banca Dati Contratti Integrativi</a></p>',
          htmlspecialchars($sede['codice_fiscale'], ENT_QUOTES, 'UTF-8'),
          htmlspecialchars($url_aran, ENT_QUOTES, 'UTF-8')
        )),
        '#weight' => 100,
      ];
    }
  }

}

function keryx_preprocess_views_view(&$variables) {
  if (
    isset($variables['id'])
    && $variables['id'] == 'amministrazione_trasparente_obblighi'
    && $variables['display_id'] == '9568_elenco_annuale_progetti'
  ) {
    $query = Database::getConnection()->select('node__field_importo_finanziamento', 'f');
    $query->addExpression('SUM(f.field_importo_finanziamento_value)', 'somma');
    $query->join('node_field_data', 'n', 'f.entity_id = n.nid');
    $query->condition('n.type', 'finanziamento'); // Ricordarsi di filtrare per tipo
    $query->condition('n.status', 1); // solo i nodi pubblicati
    $result = $query->execute()->fetchField();

    $variables['volume_finanziato'] = $result !== NULL ? (float) $result : 0;

    $variables['header']['result']['#markup'] =
      str_replace(
        '@volume_finanziato',
        number_format($variables['volume_finanziato'], 2, ',', ' '),
        $variables['header']['result']['#markup']
      );
  }
}

/**
 * Implements hook_template_preprocess_views_view_table().
 */
function keryx_preprocess_views_view_table(&$variables): void {
  if (isset($variables['view']) && $variables['view'] instanceof Drupal\views\ViewExecutable) {
    $view_id = $variables['view']->id();
    $view_display = $variables['view']->current_display;

    if ($view_id == 'amministrazione_trasparente_obblighi' && $view_display == '9448_consulenti_collaboratori') {
      $variables['anno'] = trim($variables['title']);

      $config = \Drupal::config('keryx.settings');
      $perla_pa_url = $config->get('perla_pa_url') ?? 'https://consulentipubblici.dfp.gov.it/?ente=DFP00017973';
      $variables['perla_pa_url'] = htmlspecialchars($perla_pa_url, ENT_QUOTES, 'UTF-8');
    }

  }
}
